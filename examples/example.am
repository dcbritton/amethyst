
# This example is likely riddled with memory leaks

# definition of matrix type
type Matrix

    # member declarations
    @data:int**
    @size:int

    # constructor, allocates size x size int matrix on heap
    new(size:int)
        @size = size
        @data = @allocateNxN(@size)
        return
    end

    # constructor, copies another matrix, allocates new heap space
    new(other:Matrix)
        @size = other.size
        @data = @allocateNxN(@size)
        i:int = 0
        while i != @size do
            j:int = 0
            while j != @size do
                @data[i][j] = other.data[i][j]
            j = j + 1
            end
            i = i + 1
        end
        return
    end

    # constructor, copies another matrix from a pointer, allocates new space on heap
    # assumes copy of zeroth element
    new(other:Matrix*)
        @size = other[0].size
        @data = heap [@size] int*
        i:int = 0
        while i != @size do
            @data[i] = heap [@size] int
            i = i + 1
        end
        i = 0
        while i != @size do
            j:int = 0
            while j != @size do
                @data[i][j] = other[0].data[i][j]
            j = j + 1
            end
            i = i + 1
        end
        return
    end

    # method, set each entry to be the product of its indices
    def @setEntriesToIndexProduct()
        i:int = 0
        while i != @size do
            j:int = 0
            while j != @size do
                @data[i][j] = i * j
                j = j + 1
            end
            i = i + 1
        end
        return
    end

    # method, get a deep copy of this matrix
    def @deepCopy():Matrix

        result:Matrix = new Matrix(@size)

        i:int = 0
        while i != @size do
            j:int = 0
            while j != @size do
                result.data[i][j] = @data[i][j]
                j = j + 1
            end
            i = i + 1
        end

        return result
    end

    # method to allocate an nxn on heap
    # returns a ptr to the matrix int**
    def @allocateNxN(n:int):int**
        rows:int** = heap [n] int*
        i:int = 0
        while i != n do
            rows[i] = heap [n] int
            i = i + 1
        end

        return rows
    end
end

# global type test
$mat:Matrix

# testing in main
def main():int
    
    mat:Matrix = new Matrix(4)
    mat.data[3][3] = 142
    # shallow copy (just invokes memcpy llvm intrinsic), data member of each points to the same memory
    $mat = mat
    $mat.data[3][3] = 255
    # should return 255, even though accessed through $mat 
    # edit: it does! commenting out for more tests
    # return $mat.data[3][3]

    mat2:Matrix = $mat.deepCopy()
    mat2.setEntriesToIndexProduct()
    $mat.data[3][3] = 253

    return $mat.deepCopy().data[3][3]
end
