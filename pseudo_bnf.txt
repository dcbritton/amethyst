// pseudo_bnf.txt
// contains a pseudo-bnf for amethyst

program     -   [TERM] [def TERM]* [def [TERM]]

def         -   global_decl
            |   func_def
            |   type_def

global_decl -   $ identifier : identifier [*]*

global      -   $ identifier

func_def    -   def identifier ( param_list ) [: identifier [*]*] TERM func_body end

param_list  -   [parameter [, parameter]*]

parameter   -   identifier : identifier [*]*

func_body   -   [stmt TERM]*

stmt        -   var_def
            |   assignment
            |   conditional
            |   while_loop
            |   return_stmt
            |   unheap_stmt
            |   break
            |   continue

unheap_stmt -   unheap access_expr

while_loop  -   while logic_expr do func_body end

conditional -   if logic_expr func_body [elsif logic_expr func_body]* [else func_body] end
            
return_stmt -   return logic_expr

var_def     -   identifier : identifier [*]* = logic_expr

@note: LHS of assignment must follow the token pattern: [@ | $] identifier [. identifier | [ logic_expr ]]* 
assignment  -   access_expr = logic_expr
            |   logic_expr

logic_expr  -   eq_expr
            |   logic_expr and eq_expr   
            |   logic_expr or eq_expr

eq_expr     -   rel_expr
            |   eq_expr == rel_expr
            |   eq_expr != rel_expr

rel_expr    -   shift_expr
            |   rel_expr < shift_expr
            |   rel_expr > shift_expr
            |   rel_expr <= shift_expr
            |   rel_expr >= shift_expr

shift_expr  -   add_expr
            |   shift_expr << add_expr
            |   shift_expr >> add_expr

add_expr    -   mult_expr
            |   add_expr + mult_expr
            |   add_expr - mult_expr  

mult_expr   -   access_expr
            |   mult_expr * access_expr
            |   mult_expr / access_expr
            |   mult_expr % access_expr

access_expr -   primary
            |   access_expr . dot_rhs
            |   access_expr [ logic_expr ]

dot_rhs     -    identifier
            |    call

primary     -   ( logic_expr )
            |   call
            |   literal
            |   identifier
            |   array
            |   member_name
            |   method_call
            |   global
            |   new_expr
            |   stack_expr
            |   heap_expr
            |   true
            |   false

new_expr    -   new identifier ( expr_list )

stack_expr  -   stack [ int_literal ] identifier [*]*

heap_expr   -   heap [ logic_expr ] identifier [*]*

array       -   [ expr_list? ] identifier

call        -   identifier ( expr_list )

expr_list   -   [logic_expr [, logic_expr]*]

type_def    -   type identifier TERM [temp TERM]* end

temp        -   member_decl
            |   method_def
            |   op_def
            |   constructor

member_decl  -   @ identifier : identifier [*]*

method_def  -   def @identifier ( param_list ) [: identifier [*]*] TERM func_body end

op_def      -   op operator ( parameter ) [: identifier [*]*] TERM func_body end

constructor -   new ( param_list ) TERM func_body end

member_name -   @ identifier

method_call -   @ identifier ( expr_list )