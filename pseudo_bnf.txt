// pseudo_bnf.txt
// contains a tentative pseudo-bnf of amethyst syntax

program     -   [global_def | func_def | type_def]*

global_def  -   $ identifier : identifier = logic_expr

func_def    -   def identifier ( param_list ) : identifier func_body end

param_list  -   [[parameter ,]* parameter]

parameter   -   identifier : identifier

func_body   -   [stmt]*

stmt        -   var_def
            |   logic_expr
            |   assignment
            |   conditional
            |   while_loop
            |   return_stmt

while_loop  -   while logic_expr do func_body end

conditional -   if logic_expr func_body [elsif logic_expr func_body]* [else func_body] end
            
return_stmt -   return logic_expr

assignment  -   identifier = logic_expr
            |   member_name = logic_expr

var_def     -   identifier : identifier = logic_expr

logic_expr  -   eq_expr
            |   logic_expr and eq_expr   
            |   logic_expr or eq_expr

eq_expr     -   rel_expr
            |   eq_expr == rel_expr
            |   eq_expr != rel_expr

rel_expr    -   shift_expr
            |   rel_expr < shift_expr
            |   rel_expr > shift_expr
            |   rel_expr <= shift_expr
            |   rel_expr >= shift_expr

shift_expr  -   add_expr
            |   shift_expr << add_expr
            |   shift_expr >> add_expr

add_expr    -   mult_expr
            |   add_expr + mult_expr
            |   add_expr - mult_expr  

mult_expr   -   access_expr
            |   mult_expr * access_expr
            |   mult_expr / access_expr
            |   mult_expr % access_expr

access_expr -   primary
            |   access_expr . identifier
            |   access_expr . call
            |   access_expr [ logic_expr ]

primary     -   ( logic_expr )
            |   call
            |   literal
            |   identifier
            |   array
            |   member_name
            |   method_call

array       -   [ expr_list ]

call        -   identifier ( expr_list )

expr_list   -   [[logic_expr ,]* logic_expr] 

type_def    -   type identifier [member_def | method_def | op_def]* end

member_def  -   @ identifier : identifier = logic_expr

method_def  -   def @identifier ( param_list ) : identifier func_body end

op_def      -   op operator ( parameter ) : identifier func_body end

member_name -   @ identifier

method_call -   @ identifier ( expr_list )